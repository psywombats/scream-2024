#pragma kernel GenerateNoise

#include "Includes\FastNoiseLite.compute"
#include "Includes\MetricsCompute.compute"

RWStructuredBuffer<float> _Weights;

float _NoiseScale;
float _Amplitude;
float _Frequency;
int _Octaves;

float _BaseX, _BaseY, _BaseZ;

float _PitRad;
float _PitHard;
float _PitOffX;
float _PitOffZ;
float _Curvature;
float _WallWeight;

fnl_noise_type _NoiseTypeIn;
fnl_fractal_type _FractalTypeIn;

float sinus(float theta)
{
    float PI = 3.14159265358979323846;
    float a = theta + PI / 2.0, b = PI * 2.0;
    theta = ((a > 0) ? a - b * ((int)(a / b)) : (-a + b * (((int)(a / b))))) - PI / 2.0;
    if (theta > PI / 2.0)
        theta = PI - theta;
    float x3 = (theta * theta * theta);
    float x5 = (x3 * theta * theta);
    return theta - x3 / 6.0 + x5 / 120.0;
}

float cosinus(float x)
{
    return sinus(x + 1.57079632679489661923);
}

[numthreads(threadCount, threadCount, threadCount)]
void GenerateNoise(uint3 id : SV_DispatchThreadID)
{
    fnl_state noise = fnlCreateState();
    noise.noise_type = _NoiseTypeIn;
    noise.fractal_type = 2;
    noise.frequency = _Frequency;
    noise.octaves = _Octaves;

    float3 pos = (id + float3(_BaseX, _BaseY, _BaseZ)) * _NoiseScale;
    float noiseVal = fnlGetNoise3D(noise, pos.x, pos.y, pos.z);

    float biasX = _PitOffX;
    float biasY = _PitOffZ;
    if (_Curvature > 0)
    {
        biasX *= sinus(pos.y * _Curvature);
        biasY *= cosinus(pos.y * _Curvature);
    }
    else
    {
        biasX *= pos.y;
        biasY *= pos.y;
    }
    float offCenter = sqrt((pos.x - biasX) * (pos.x - biasX) + (pos.z - biasY) * (pos.z - biasY));
    offCenter += noiseVal * _WallWeight;
    float n = offCenter / _PitRad;

    _Weights[indexFromCoord(id.x, id.y, id.z)] = n;
}